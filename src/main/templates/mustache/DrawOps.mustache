{{!
    The MIT License
    Copyright Â© 2023 Johannes Hampel

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
}}

package de.hipphampel.array2dops.draw;

import de.hipphampel.array2dops.model.{{&model.array-type}};
import de.hipphampel.array2dops.geom.Line;
import de.hipphampel.array2dops.geom.Point;
import de.hipphampel.array2dops.geom.Rectangle;
import java.util.Objects;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/**
 * Fundamental primitives to perform drawing operations on an {@link  {{&model.array-type}} }.
 * <p>
 * Provides only basic operations like drawing points, lines, rects, and circles.
 */
public class {{&draw.generic-class-name}} implements DrawOperations<{{model.wrapper-type}}, {{&model.generic-array-type}}, {{&draw.generic-class-name}}>  {

  private final {{&model.generic-array-type}} canvas;
  private final Rectangle clip;
  private {{model.element-type}} color;
  private int originX;
  private int originY;

  /**
   * Constructor.
   *
   * @param canvas The array to draw in.
   */
  public {{&draw.class-name}}({{&model.generic-array-type}} canvas) {
    this.canvas = Objects.requireNonNull(canvas);
    this.clip = new Rectangle(0, 0, canvas.getWidth(), canvas.getHeight());
  }

  /**
   * Returns the canvas.
   *
   * @return the canvas
   */
  public {{&model.generic-array-type}} getCanvas() {
    return this.canvas;
  }

  /**
   * Returns the color.
   *
   * @return the color
   */
  public {{model.element-type}} getColor() {
    return this.color;
  }

  @Override
  public {{&draw.generic-class-name}} color({{model.wrapper-type}} color) {
    this.color = color;
    return this;
  }

  @Override
  public {{&draw.generic-class-name}} origin(int x, int y) {
    this.originX = x;
    this.originY = y;
    return this;
  }

  @Override
  public {{&draw.generic-class-name}} set(int x, int y) {
    if (this.clip.contains(x + originX, y + originY)) {
      this.canvas.setUnsafe(x + originX, y + originY, this.color);
    }
    return this;
  }

  @Override
  public {{&draw.generic-class-name}} line(int x0, int y0, int x1, int y1) {
    Line line = this.clip.intersect(new Line(x0 + originX, y0 + originY, x1 + originX, y1 + originY)).orElse(null);
    if (line == null) {
      return this;
    }
    x0 = line.x0();
    y0 = line.y0();
    x1 = line.x1();
    y1 = line.y1();

    // Basically a bresenham algo
    int dx = Math.abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
    int dy = -Math.abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
    int err = dx + dy, e2; /* error value e_xy */

    while (true) {
      this.canvas.setUnsafe(x0, y0, this.color);
      if (x0 == x1 && y0 == y1) {
        break;
      }
      e2 = 2 * err;
      if (e2 > dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
      if (e2 < dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
    }

    return this;
  }

  @Override
  public {{&draw.generic-class-name}} rect(int x0, int y0, int x1, int y1) {
    return line(x0, y0, x1, y0)
          .line(x1, y0, x1, y1)
          .line(x1, y1, x0, y1)
          .line(x0, y1, x0, y0);
  }

  @Override
  public {{&draw.generic-class-name}} fillRect(int x0, int y0, int x1, int y1) {
    Rectangle toDraw = this.clip.intersect(new Rectangle(
      Math.min(x0, x1) + originX,
      Math.min(y0, y1) + originY,
      Math.abs(x1 - x0),
      Math.abs(y1 - y0))).orElse(null);
    if (toDraw != null) {
      int h = toDraw.height();
      int x = toDraw.x() - originX;
      int y = toDraw.y() - originY;
      int w = x + toDraw.width();
      for(int i = 0; i < h + 1; i++) {
        line(x, y + i, w, y + i);
      }
    }
    return this;
  }

  @Override
  public {{&draw.generic-class-name}} circle(int x0, int y0, int r) {
    int d = -r;
    int x = r;
    int y = 0;

    while (y <= x) {
      set(x0 - x, y0 + y);
      set(x0 + x, y0 + y);
      set(x0 - x, y0 - y);
      set(x0 + x, y0 - y);
      set(x0 + y, y0 - x);
      set(x0 + y, y0 + x);
      set(x0 - y, y0 - x);
      set(x0 - y, y0 + x);

      d += 2 * y + 1;
      y++;
      if (d > 0) {
        x--;
        d -= 2*x;
      }
    }

    return this;
  }

  @Override
  public {{&draw.generic-class-name}} fillCircle(int x0, int y0, int r) {
    int d = -r;
    int x = r;
    int y = 0;

    while (y <= x) {
      line(x0 - x, y0 + y, x0 + x, y0 + y);
      line(x0 - x, y0 - y, x0 + x, y0 - y);
      line(x0 + y, y0 - x, x0 + y, y0 + x);
      line(x0 - y, y0 - x, x0 - y, y0 + x);

      d += 2 * y + 1;
      y++;
      if (d > 0) {
        x--;
        d -= 2*x;
      }
    }

    return this;
  }

  @Override
  public {{&draw.generic-class-name}} image(int x0, int y0, {{&model.generic-array-type}} image) {
    Rectangle imageRect = new Rectangle(x0 + originX, y0 + originY, image.getWidth(), image.getHeight());
    Rectangle affectedRect = imageRect.intersect(this.clip).orElse(null);
    if (affectedRect == null) {
      return null;
    }

    {{&model.generic-array-type}} imageRegion = image.shallowRegion(
      Math.max(0, imageRect.width() - affectedRect.width()),
      Math.max(0, imageRect.height() - affectedRect.height()),
      affectedRect.width(),
      affectedRect.height());
    this.canvas.fillFrom(Math.max(0, x0), Math.max(0, y0), imageRegion);

    return this;
  }

  @Override
  public {{&draw.generic-class-name}} fill(int x0, int y0) {
    if (!clip.contains(x0 + originX, y0 + originY)) {
      return this;
    }

    {{model.element-type}} old = canvas.get(x0, y0);
    Set<Point> toBeDone = new HashSet<>();
    toBeDone.add(new Point(x0 + originX, y0 + originY));
    while (!toBeDone.isEmpty()) {
      Point next = toBeDone.iterator().next();
      toBeDone.remove(next);
      int x = next.x();
      int y = next.y();
      canvas.set(x, y, color);
      if (clip.contains(x-1, y) && Objects.equals(canvas.get(x-1, y), old)) {
        toBeDone.add(new Point(x-1, y));
      }
      if (clip.contains(x+1, y) && Objects.equals(canvas.get(x+1, y), old)) {
        toBeDone.add(new Point(x+1, y));
      }
      if (clip.contains(x, y-1) && Objects.equals(canvas.get(x, y-1), old)) {
        toBeDone.add(new Point(x, y-1));
      }
      if (clip.contains(x, y+1) && Objects.equals(canvas.get(x, y+1), old)) {
        toBeDone.add(new Point(x, y+1));
      }
    }
    return this;
  }
}